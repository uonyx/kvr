/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

/*
* Copyright (c) 2015 Ubaka Onyechi
*
* kvr is free software distributed under the MIT license.
* See https://raw.githubusercontent.com/uonyx/kvr/master/LICENSE for details.
*/

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

#include "../src/kvr.h"
#include <cstdio>
#include <iostream>
#include <string>

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

// Example showing how to pretty print to JSON. 
// (Useful as kvr::value::encode doesn't support pretty printing).

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

void json_prettify (const kvr::value *val, std::string *str, size_t tabc = 0, const char *key = NULL, size_t keylen = 0)
{
  for (size_t t = 0; t < tabc; ++t) { str->append ("\t"); }

  if (key)
  {
    str->append ("\"");
    str->append (key, keylen);
    str->append ("\": ");
  }

  //////////////////////////////////
  if (val->is_map ())
  //////////////////////////////////
  {
    str->append ("{\n");
    kvr::sz_t pre = 0;
    kvr::value::cursor c (val);
    kvr::pair   p;
    while (c.get (&p))
    {
      if (pre) { str->append (",\n"); }
      kvr::key *k = p.get_key ();
      kvr::value *v = p.get_value ();
      json_prettify (v, str, tabc + 1, k->get_string (), k->get_length ());
      pre = 1;
    }

    str->append ("\n");
    for (size_t t = 0; t < tabc; ++t) { str->append ("\t"); }
    str->append ("}");
  }

  //////////////////////////////////
  else if (val->is_array ())
  //////////////////////////////////
  {
    str->append ("[\n");
    for (kvr::sz_t i = 0, c = val->length (), pre = 0; i < c; ++i)
    {
      if (pre) { str->append (",\n"); }
      kvr::value *v = val->element (i);
      json_prettify (v, str, tabc + 1, NULL, 0);
      pre = 1;
    }
    str->append ("\n");
    for (size_t t = 0; t < tabc; ++t) { str->append ("\t"); }
    str->append ("]");
  }

  //////////////////////////////////
  else if (val->is_string ())
  //////////////////////////////////
  {
    kvr::sz_t slen = 0;
    const char *s = val->get_string (&slen);
    str->append ("\"");
    str->append (s, slen);
    str->append ("\"");
  }

  //////////////////////////////////
  else if (val->is_integer ())
  //////////////////////////////////
  {
    int64_t i = val->get_integer ();
    char istr [22];
#ifdef _MSC_VER
    size_t ilen = sprintf_s (istr, "%lld", (long long) i);
#else
    size_t ilen = sprintf (istr, "%lld", (long long) i);
#endif    
    str->append (istr, ilen);
  }

  //////////////////////////////////
  else if (val->is_float ())
  //////////////////////////////////
  {
    double f = val->get_float ();
    char fstr [25];
#ifdef _MSC_VER
    int flen = sprintf_s (fstr, "%g", f);
#else
    int flen = sprintf (fstr, "%g", f);
#endif
    str->append (fstr, flen);
  }

  //////////////////////////////////
  else if (val->is_boolean ())
  //////////////////////////////////
  {
    bool b = val->get_boolean ();
    if (b)
      str->append ("true", 4);
    else
      str->append ("false", 5);
  }

  //////////////////////////////////
  else if (val->is_null ())
  //////////////////////////////////
  {
    str->append ("null", 4);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

void example_pretty_print_json ()
{
  // create a kvr context
  kvr::ctx *ctx = kvr::ctx::create ();

  // create a map and populate
  kvr::value *map = ctx->create_value ()->as_map ();
  map->insert ("street", "sesame");
  map->insert ("f", false);
  map->insert ("i", 123);
  map->insert ("pi", 3.1416);
  map->insert_null ("null");

  kvr::value *a = map->insert_array ("array");
  a->push (-1);
  a->push (27);
  a->push (300);
  a->push ("abc");
  a->push (true);

  kvr::value *o = map->insert_map ("object");
  o->insert ("one", 1);
  o->insert ("two", 2);
  o->insert ("six", 6);

  o->insert_map ("map")->copy (o);

  std::string jsonp;
  json_prettify (map, &jsonp);
  std::cout << jsonp << std::endl;

  kvr::ctx::destroy (ctx);
}

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

int main ()
{
  example_pretty_print_json ();
  
  return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
